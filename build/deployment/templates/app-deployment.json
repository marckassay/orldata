{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.1",
  "parameters": {
    "containerRegistryName": {
      "type": "string",
      "metadata": {
        "description": "A stage 1 resource."
      }
    },
    "userAssignedIdName": {
      "type": "string",
      "metadata": {
        "description": "A stage 1 resource."
      }
    },
    "hostName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "A stage 2 resource. Empty (default) value implies containerRegistry deployment."
      }
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "A stage 2 resource. Empty (default) value implies containerRegistry deployment."
      }
    },
    "appServicePlanName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "A stage 2 resource. This plan may have multiple App Services associated with it."
      }
    },
    "imageUri": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "A stage 2 value. The registry path with image name. This is the image Uri."
      }
    }
  },
  "variables": {
    "tenantId": "[subscription().tenantId]",
    "bootstrapRoleAssignmentId": "[guid(concat(resourceGroup().id, 'arc push'))]",
    "arcPushId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8311e382-0749-4cb8-b61a-304f252e45ec')]"
  },
  "resources": [
    { // STAGE 1
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2019-05-01",
      "name": "[parameters('containerRegistryName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Basic",
        "tier": "Basic"
      },
      "properties": {
        "adminUserEnabled": true,
        "policies": {
          "quarantinePolicy": {
            "status": "disabled"
          },
          "trustPolicy": {
            "type": "Notary",
            "status": "disabled"
          },
          "retentionPolicy": {
            "days": 7,
            "status": "disabled"
          }
        }
      }
    },
    { // STAGE 1
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "name": "[parameters('userAssignedIdName')]",
      "location": "[resourceGroup().location]"
    },
    { // STAGE 1
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2017-09-01",
      "name": "[variables('bootstrapRoleAssignmentId')]",
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[variables('arcPushId')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdName')), '2018-11-30').principalId]",
        "scope": "[resourceGroup().id]",
        "principalType": "ServicePrincipal"
      }
    },
    { // STAGE 2
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2016-10-01",
      "name": "[parameters('keyVaultName')]",
      "location": "[resourceGroup().location]",
      "condition": "[not(empty(parameters('keyVaultName')))]",
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdName'))]"
      ],
      "properties": {
        "sku": {
          "family": "A",
          "name": "Standard"
        },
        "tenantId": "[variables('tenantId')]",
        "enabledForDeployment": true,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": true,
        "accessPolicies": [
          {
            "tenantId": "[variables('tenantId')]",
            "objectId": "[reference(parameters('userAssignedIdName'), '2018-11-30','Full').principalId]",
            "permissions": {
              "secrets": [
                "Get",
                "List",
                "Set",
                "Delete",
                "Recover",
                "Backup",
                "Restore",
                "Purge"
              ]
            }
          }
        ]
      }
    },
    { // STAGE 2
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(parameters('keyVaultName'), '/DOCKER-REGISTRY-SERVER-PASSWORD')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))]"
      ],
      "properties": {
        "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2019-05-01').passwords[0].value]",
        "attributes": {
          "enabled": true
        }
      }
    },
    { // STAGE 2
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(parameters('keyVaultName'), '/DOCKER-REGISTRY-SERVER-URL')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))]"
      ],
      "properties": {
        "value": "[concat(parameters('containerRegistryName'),'.azurecr.io')]",
        "attributes": {
          "enabled": true
        }
      }
    },
    { // STAGE 2
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(parameters('keyVaultName'), '/DOCKER-REGISTRY-SERVER-USERNAME')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))]"
      ],
      "properties": {
        "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2019-05-01').username]",
        "attributes": {
          "enabled": true
        }
      }
    },
    { // STAGE 2
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "name": "[parameters('appServicePlanName')]",
      "location": "[resourceGroup().location]",
      "condition": "[not(empty(parameters('appServicePlanName')))]",
      "sku": {
        "name": "B1",
        "tier": "Basic",
        "size": "B1",
        "family": "B",
        "capacity": 1
      },
      "kind": "linux",
      "properties": {
        "name": "[parameters('appServicePlanName')]",
        "perSiteScaling": false,
        "reserved": true,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0
      }
    },
    { // STAGE 2
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "name": "[parameters('hostName')]",
      "location": "[resourceGroup().location]",
      "kind": "app,linux,container",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ],
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdName'))]": {
          }
        }
      },
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[concat(parameters('hostName'), '.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[concat(parameters('hostName'), '.scm.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "siteConfig": {
          "numberOfWorkers": 1,
          "netFrameworkVersion": "v4.6",
          "phpVersion": "",
          "pythonVersion": "",
          "nodeVersion": "",
          "requestTracingEnabled": false,
          "remoteDebuggingEnabled": false,
          "remoteDebuggingVersion": "VS2017",
          "httpLoggingEnabled": false,
          "logsDirectorySizeLimit": 25,
          "detailedErrorLoggingEnabled": false,
          "publishingUsername": "[concat('$', parameters('hostName'))]",
          "scmType": "None",
          "use32BitWorkerProcess": true,
          "webSocketsEnabled": false,
          "alwaysOn": true,
          "appCommandLine": "",
          "managedPipelineMode": "Integrated",
          "virtualApplications": [
            {
              "virtualPath": "/",
              "physicalPath": "site\\wwwroot",
              "preloadEnabled": true,
              "virtualDirectories": [
              ]
            }
          ],
          "winAuthAdminState": 0,
          "winAuthTenantState": 0,
          "customAppPoolIdentityAdminState": false,
          "customAppPoolIdentityTenantState": false,
          "loadBalancing": "LeastRequests",
          "routingRules": [
          ],
          "experiments": {
            "rampUpRules": [
            ]
          },
          "autoHealEnabled": false,
          "vnetName": "",
          "siteAuthEnabled": false,
          "localMySqlEnabled": false,
          "appSettings": [
            {
              "name": "DOCKER_REGISTRY_SERVER_USERNAME",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_PASSWORD",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_URL",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            }
          ],
          "linuxFxVersion": "[if(not(empty(parameters('imageUri'))),concat('DOCKER|',parameters('imageUri')),'')]",
          "http20Enabled": false,
          "minTlsVersion": "1.2",
          "ftpsState": "AllAllowed",
          "fileChangeAuditEnabled": false,
          "functionsRuntimeScaleMonitoringEnabled": false,
          "preWarmedInstanceCount": 0
        },
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
        "reserved": true,
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": true,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 0,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": false
      }
    },
    { // STAGE 2
      "type": "Microsoft.Web/sites/hostNameBindings",
      "apiVersion": "2018-11-01",
      "name": "[concat(parameters('hostName'), '/', parameters('hostName'), '.azurewebsites.net')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('hostName'))]"
      ],
      "properties": {
        "siteName": "[parameters('hostName')]",
        "hostNameType": "Verified"
      }
    }
  ],
  "outputs": {
    "valueC": {
      "type": "string",
      "value": "-------------"
    }
  }
}
